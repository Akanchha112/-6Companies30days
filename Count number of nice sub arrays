Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There are no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16
class Solution {
public:
    int atmost(vector<int>& nums, int k){
        int size=0,count=0,start=0,end=0;
        while(end<nums.size()){
            if(nums[end]%2 ==1) count++;
            while(count>k){
                if(nums[start]%2 ==1) count--;
                start++;
            }
            size += end-start+1;
            end++;
        }
        return size;
    }
    int numberOfSubarrays(vector<int>& nums, int k) {
        return atmost(nums,k)-atmost(nums,k-1);
    }
};
